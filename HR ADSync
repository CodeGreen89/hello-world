
$Global:RegKeyPath = 'HKLM:\\Software\Provident\HRADSync'

<##
Invoke-InactiveRecentLeavers
|
\_Confirm-RuntimeAssets
|
\_Get-Leavers
|
\_Show-ConfirmationMessage
|
\_Invoke-Disable
|	|
|	\_Get-UserDomain
|	|
|	\_Backup-GroupMembership
|	|	|
|	|	\_Out-SQLServer
|	|
|	\_Remove-GroupMembership
|	|
|	\_Set-ADDescription
|	|
|	\_Set-HideFromGAL
|	|
|	\_Remove-DefenderToken
|	|
|	\_Invoke-365LeaversPolicy
|	|
|	\_Remove-365License
|	|
|	\_Move-DisabledOU
|
\_Invoke-InactiveRecentLeavers

##>

<# 
.SYNOPSIS 

.DESCRIPTION

.PARAMETER 

.EXAMPLE

.LINK

.NOTES
Version History 
v1.0 - Dale Stewart - 20161110 16:31
#>
function Confirm-RuntimeAssets
{
    param 
    (
        [Parameter(position=0, Mandatory=$false)] [string]$RegKeyPath 
    )

	#check if quest snapin is loaded
	Confirm-QuestSnapin

	#$RegKeyPath = 'HKLM:\\Software\Provident\HRADSync'
	$DomainsRegKeyPath = "$RegKeyPath\Domains"
	$RegDomains = Get-ChildItem -Path $DomainsRegKeyPath
	
	foreach ($RegDomain in $RegDomains)
	{
		$RegPath = $RegDomain.Name
		$RegKeys = Get-ItemProperty -Path Registry::$RegPath

		if (!($RegKeys.LeaverOU) -or !($RegKeys.FQDN))
		{
			"The leaver OU or FQDN for $RegPath is missing" | Out-Log -Fail
		}

			$Domain = $Domain.Substring(0,$Domain.IndexOf('.'))
			if (!(Get-ItemProperty -Path $RegKeyPath -Name "svc_leaver_$Domain"))
			{
				"A credential could not be found for $Domain in $RegKeyPath" | Out-Log -Fail
			}
	}

}

<# 
.SYNOPSIS 

.DESCRIPTION

.PARAMETER 

.EXAMPLE

.LINK

.NOTES
Version History 
v1.0 - Dale Stewart - 20161110 16:31
#>
function Get-HRADSyncConfig
{
    param 
    (
        [Parameter(position=0, Mandatory=$true)] [string]$ConfigName 
    )
	
	#$RegKeyPath = 'HKLM:\\Software\Provident\HRADSync'
	$RegDomains = Get-ChildItem -Path $DomainsRegKeyPath
	
	foreach ($RegDomain in $RegDomains)
	{
		$RegPath = $RegDomain.Name
		$RegKeys = Get-ItemProperty -Path Registry::$RegPath

		if (($RegKeys.FQDN) -eq $FQDN)
		{
			$RegKeys.LeaversOU
		}
	}
	
}

<# 
.SYNOPSIS 

.DESCRIPTION

.PARAMETER 

.EXAMPLE

.LINK

.NOTES
Version History 
v1.0 - Dale Stewart - 20161110 16:31
#>
function Get-DomainServiceAccount
{
    param 
    (
        [Parameter(position=0, Mandatory=$true)] [string]$Domain 
    )

	$RegDomain = $RegKeyPath + '\Domains\' + $Domain

	$UserName = (Get-ItemProperty -Path $RegDomain -Name ServiceAccount).ServiceAccount
	$Salt = (Get-ItemProperty -Path $RegKeyPath -Name Salt).Salt

	$cred = Get-CustomCredential -UserName $UserName `
							-Path $RegDomain `
							-RegKey ServiceAccountPW `
							-Salt $Salt `
							-Registry
	$cred
}

<# 
.SYNOPSIS 

.DESCRIPTION

.PARAMETER 

.EXAMPLE

.LINK

.NOTES
Version History 
v1.0 - Dale Stewart - 20161110 16:31
#>
function Get-LeaverOUPaths
{
    param 
    (
        [Parameter(position=0, Mandatory=$true)] [string]$FQDN
    )

	$RegKeyPath = 'HKLM:\\Software\Provident\HRADSync'
	$DomainsRegKeyPath = "$RegKeyPath\Domains"
	$RegDomains = Get-ChildItem -Path $DomainsRegKeyPath
	
	foreach ($RegDomain in $RegDomains)
	{
		$RegPath = $RegDomain.Name
		$RegKeys = Get-ItemProperty -Path Registry::$RegPath

		if (($RegKeys.FQDN) -eq $FQDN)
		{
			$RegKeys.LeaversOU
		}
	}
}

<# 
.SYNOPSIS 

.DESCRIPTION

.PARAMETER 

.EXAMPLE

.LINK

.NOTES
Version History 
v1.0 - Dale Stewart - 20161110 16:31
#>
function Invoke-DisableProcess
{
    param 
    (
        [Parameter(position=0, Mandatory=$true)] [string]$ExchangeURI 		
        , [Parameter(position=0, Mandatory=$true)] [PSObject]$AccountToDisable 
		, [Parameter(position=0, Mandatory=$true)] [PSCredential]$ServiceAccount 
    )

	$UserDomain = Get-UserDomain -ADUser $AccountToDisable 
	$DomainServer = Get-ADDomain $UserDomain

	#disabled account
	Disable-ADAccount -Identity $Disable.Username

	#backup membership groups
	Backup-GroupMembership -DomainServer $DomainServer -ADUser $AccountToDisable -ServiceAccount $ServiceAccount 
	
	#remove membership groups
	Remove-GroupMembership -DomainServer $DomainServer -ADUser $AccountToDisable -ServiceAccount $ServiceAccount 

	#edit description
	Set-ADDescription -DomainServer $DomainServer -ADUser $AccountToDisable -ServiceAccount $ServiceAccount

	#hide from global address list
	Invoke-HideFromGlobalAddressList -DomainServer $DomainServer -ADUser $AccountToDisable -ServiceAccount $ServiceAccount

	#remove defender token
	Remove-DefenderToken -DomainServer $DomainServer -ADUser $AccountToDisable -ServiceAccount $ServiceAccount

	#add the account to the 30 day leavers policy
	Invoke-365LeaversPolicy -ExchangeURI $ExchangeURI -ADUser $AccountToDisable -ServiceAccount $ServiceAccount

	#remove 365 license so it can be repurposed
	Remove-365License -ExchangeURI $ExchangeURI -ADUser $AccountToDisable -ServiceAccount $ServiceAccount

	#move into disabled OU
	Move-DisabledOU -DomainServer $DomainServer -ADUser $AccountToDisable -ServiceAccount $ServiceAccount
}

<# 
.SYNOPSIS 

.DESCRIPTION

.PARAMETER 

.EXAMPLE

.LINK

.NOTES
Version History 
v1.0 - Dale Stewart - 20161110 16:31
#>
function Move-DisabledOU
{
    param 
    (
		[Parameter(position=0, Mandatory=$true)] [string]$DomainServer
        , [Parameter(position=1, Mandatory=$true)] [PSObject]$ADUser
		, [Parameter(position=2, Mandatory=$true)] [PSCredential]$ServiceAccount
    )
    #Move User to Disabled Users OU
	$UserDomain = Get-UserDomain -ADUser $ADUser
	
	$LeaverOUPath = Get-LeaverOUPaths -FQDN $UserDomain

	Get-ADUser $ADUser -Server $DomainServer -Credential $ServiceAccount | Move-ADObject -TargetPath $LeaverOUPath
 
                
}

<# 
.SYNOPSIS 

.DESCRIPTION

.PARAMETER 

.EXAMPLE

.LINK

.NOTES
Version History 
v1.0 - Dale Stewart - 20161110 16:31
#>
function Set-DomainServiceAccount
{
    param 
    (
        [Parameter(position=0, Mandatory=$true)] [string]$Domain 
		, [Parameter(position=0, Mandatory=$true)] [string]$UserName
		, [Parameter(position=0, Mandatory=$true)] [string]$Password
    )

	$RegDomain = $RegKeyPath + '\Domains\' + $Domain

	Set-RegistryKeyValue -Path $RegDomain -Name ServiceAccount -Value $UserName -PropertyType String

	$Salt = New-Salt -length 32
	Set-RegistryKeyValue -Path $RegKeyPath -Name Salt -Value $Salt -PropertyType String

	$SS = New-SecureString -String $Password -Salt $Salt
	Set-RegistryKeyValue -Path $RegDomain -Name ServiceAccountPW -Value $SS -PropertyType String
	
}

<# 
.SYNOPSIS 

.DESCRIPTION

.PARAMETER 

.EXAMPLE

.LINK

.NOTES
Version History 
v1.0 - Dale Stewart - 20161110 16:31
#>
function Show-ConfirmationMessage
{
    param 
    (
        [Parameter(position=0, Mandatory=$true)] [string]$Title 
		, [Parameter(position=1, Mandatory=$true)] [string]$Message
		, [Parameter(position=2, Mandatory=$true)] [string]$YesDesc
		, [Parameter(position=2, Mandatory=$true)] [string]$NoDesc
    )

	$yes = New-Object System.Management.Automation.Host.ChoiceDescription "&Yes", $YesDesc 
	$no = New-Object System.Management.Automation.Host.ChoiceDescription "&No", $NoDesc 
	$options = [System.Management.Automation.Host.ChoiceDescription[]]($yes, $no)

	$result = $host.ui.PromptForChoice($Title, $Message, $options, 0) 

	$result

}

<# 
.SYNOPSIS 

.DESCRIPTION

.PARAMETER 

.EXAMPLE

.LINK

.NOTES
Version History 
v1.0 - Dale Stewart - 20161110 16:31
#>
function Start-RecentLeaversRemoval
{
    param 
    (
        [Parameter(position=0, Mandatory=$true)] [string]$HRDataServer 
		, [Parameter(position=1, Mandatory=$true)] [string]$HRDatabase
		, [Parameter(position=2, Mandatory=$true)] [int]$DaysInPast
		, [Parameter(position=3, Mandatory=$false)] [string[]]$FQDomains
		, [Parameter(position=3, Mandatory=$false)] [switch]$Unattended
		, [Parameter(position=0, Mandatory=$true)] [string]$ExchangeURI 
    )

	Confirm-RuntimeAssets

	#get the people that have left
	$Leavers = Get-Leavers `
					-HRDataServer OPENHRDB `
					-HRDatabase HRProEmployee `
					-DaysInPast 60

	"Leavers have been identified, please review and accept to disable accounts" | Out-Log -Information

	
	#check if the ad account is enabled
	foreach ($Leaver in $Leavers)
	{
		#check whether the AD account is already disabled
		foreach ($Domain in $FQDomains)
		{
			$ADServer = Get-ADDomain $Domain
			$AdUser = Get-ADUser -Identity $Leaver.Username -Server $ADServer.InfrastructureMaster -Properties *
		}

		if ($AdUser.Enabled -eq $true)
		{
			$DisablesToPerform += $Leaver
		}
	}

	#if run by a user and not a service, show the grid to confirm
	if (!$Unattended)
		{
			$DisablesToPerform | Out-GridView -Title "Accounts still to disable"

			$confirmation = Show-ConfirmationMessage -Title "Disable confirmation" `
									-Message "Please confirm you have reviewed the list of accounts 'nand are ready to proceed with disabling the accounts" `
									-YesDesc "I'm 100% sure, lets go" `
									-NoDesc "I'm having second thoughts, lets start over"
		}

	#if user confirmed or unattended, run disable process
	if ($confirmation -eq 1 -or $Unattended)
	{
		$DisablesToPerform | Out-Log

		foreach ($ADUser in $DisablesToPerform)
		{
			Invoke-DisableProcess -AccountToDisable $ADUser
		}
	}

	if ($confirmation -eq 0)
	{
		Invoke-InactiveRecentLeavers -HRDataServer $HRDataServer `
										-HRDatabase $HRDatabase `
										-DaysInPast $DaysInPast
	}

	

}










